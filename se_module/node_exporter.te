policy_module(node_exporter,0.1.0)
	gen_require(`
		type var_t, var_run_t;
		attribute pidfile;
	')
########################################
#
# Declarations
#

type node_exporter_t;
type node_exporter_exec_t;
init_daemon_domain(node_exporter_t, node_exporter_exec_t)

type node_exporter_runtime_t;
###The following macro is not present in RHEL 7/8 policy so we've expanded it here
###files_runtime_file(node_exporter_runtime_t)
files_type(node_exporter_runtime_t)
typeattribute node_exporter_runtime_t pidfile;

type node_exporter_var_lib_t;
files_type(node_exporter_var_lib_t)

type node_exporter_log_t;
logging_log_file(node_exporter_log_t)

###Not in original module from refpolicy
#Create dedicated network port type
type node_exporter_port_t;
corenet_port(node_exporter_port_t)

#Create a boolean to remove usage of hplip_port_t
bool strict_node_exporter_network_rules false;

########################################
#
# Local policy
#

allow node_exporter_t self:fifo_file rw_fifo_file_perms;
allow node_exporter_t self:process { getsched signal };
allow node_exporter_t self:netlink_route_socket r_netlink_socket_perms;
allow node_exporter_t self:tcp_socket create_stream_socket_perms;
allow node_exporter_t self:udp_socket create_socket_perms;

manage_files_pattern(node_exporter_t, node_exporter_runtime_t, node_exporter_runtime_t)
###The following macro is not present in RHEL 7/8 policy so we've expanded it here
###files_runtime_filetrans(node_exporter_t, node_exporter_runtime_t, file)
allow node_exporter_t var_t:dir search_dir_perms;
allow node_exporter_t var_run_t:lnk_file read_lnk_file_perms;
filetrans_pattern(node_exporter_t, var_run_t, node_exporter_runtime_t, file)

manage_dirs_pattern(node_exporter_t, node_exporter_var_lib_t, node_exporter_var_lib_t)
manage_files_pattern(node_exporter_t, node_exporter_var_lib_t, node_exporter_var_lib_t)
files_var_lib_filetrans(node_exporter_t, node_exporter_var_lib_t, { dir file })

append_files_pattern(node_exporter_t, node_exporter_log_t, node_exporter_log_t)
create_files_pattern(node_exporter_t, node_exporter_log_t, node_exporter_log_t)
setattr_files_pattern(node_exporter_t, node_exporter_log_t, node_exporter_log_t)
logging_log_filetrans(node_exporter_t, node_exporter_log_t, { dir file })

corenet_tcp_bind_generic_node(node_exporter_t)
# Also uses port 9100
if	( ! strict_node_exporter_network_rules )	{
  corenet_tcp_bind_hplip_port(node_exporter_t)
}
#Not in original module from refpolicy. We allow node_exporter_t to bind to a node_exporter_port_t to allow port customization
allow node_exporter_t node_exporter_port_t:tcp_socket name_bind;

dev_read_sysfs(node_exporter_t)

fs_getattr_all_fs(node_exporter_t)

init_read_state(node_exporter_t)

kernel_read_fs_sysctls(node_exporter_t)
kernel_read_kernel_sysctls(node_exporter_t)
kernel_read_net_sysctls(node_exporter_t)
kernel_read_network_state(node_exporter_t)
kernel_read_software_raid_state(node_exporter_t)
kernel_read_system_state(node_exporter_t)

ifdef(`init_systemd',`
	dbus_system_bus_client(node_exporter_t)

	init_dbus_chat(node_exporter_t)
	init_get_all_units_status(node_exporter_t)
	init_get_system_status(node_exporter_t)
')

optional_policy(`
	kernel_read_rpc_sysctls(node_exporter_t)

	rpc_search_nfs_state_data(node_exporter_t)
')